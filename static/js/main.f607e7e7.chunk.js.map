{"version":3,"sources":["utils/array.ts","state/questions.ts","state/results.ts","state/index.tsx","ui/Layout.tsx","ui/config.ts","ui/Button.tsx","ui/Text.tsx","pages/intro.tsx","ui/Loading.tsx","ui/Error.tsx","ui/Spacer.tsx","ui/Center.tsx","pages/quiz/api.ts","utils/random.ts","pages/quiz/components/Question.tsx","pages/quiz/components/Countdown.tsx","pages/quiz/components/CountdownBar.tsx","pages/quiz/index.tsx","utils/timer.ts","pages/results/components/Result.tsx","ui/List.tsx","pages/results/components/KeyNumber.tsx","pages/results/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["shuffle","arr","i","length","j","Math","floor","random","initialQuestionsState","data","current","queue","loading","error","powerups","removeTwo","active","used","addTime","requestQuestions","createAsyncAction","TYPE_PREFIX","nextQuestion","createAction","activatePowerup","questionsActions","questionGuard","action","type","includes","questionsReducer","createReducer","handleAction","request","state","success","questions","payload","map","question","id","currentId","shift","failure","remainingQuestions","nextId","initialResultsState","answers","answerQuestion","resultsActions","resultsGuard","resultsReducer","initialState","results","actions","GlobalContext","React","globalReducer","Provider","children","value","useGlobalState","Layout","styled","div","colors","red","white","purple","darkblue","lightblue","yellow","green","gray","padding","fontSizes","fontWeights","Button","button","props","color","Title","h1","Text","p","Intro","as","to","Wrapper","LoadingIndicator","Error","text","Spacer","hr","size","Center","convertAPIResponse","triviaResponse","rawQuestion","correct","incorrect_answers","answer","decodeURIComponent","splice","correct_answer","toString","substring","hardCodedData","fakeData","getQuestions","a","axios","get","response","Question","info","disabledAnswers","image","data-testid","alt","src","choice","key","disabled","onClick","StyledContainer","Countdown","remainingTime","decimals","toFixed","StyledBar","percentage","CountdownBar","totalTime","max","min","total","QuizLayoutContainer","Quiz","dispatch","useState","hiddenIndices","setHiddenIndices","useEffect","then","catch","err","message","undefined","duration","questionId","interval","setRemainingTime","timeup","setTimeup","timeDiffStart","Date","getTime","countdownTimeout","setTimeout","timeDiff","newRemainingTime","clearTimeout","setTime","newTime","useTimer","wrongOptions","_","filter","index","slice","skipQuestion","powerup","JSON","stringify","className","getAnswerColor","answerIndex","result","Result","time","seconds","getInfo","List","ol","KeyNumber","top","bottom","sub","Results","history","useHistory","Object","keys","push","incorrect","unanswered","resultsByQuestion","AppStyle","createGlobalStyle","Routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f607e7e7.chunk.js","sourcesContent":["/*\n * Array shuffling courtesy of\n * https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\n */\nexport const shuffle = <T = any>(arr: T[]): T[] => {\n    for (let i = arr.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n}\n","\nimport { createAction, createAsyncAction, createReducer, ActionType, Action } from 'typesafe-actions';\n\nimport { shuffle } from '../utils/array';\n\nexport type Question = {\n  id: string;\n  text: string; // To have a question with no text, must use empty string\n  image?: string; // Link to image\n  answers: string[];\n  correct: number;\n}\n\ntype QuestionMap = {\n  [questionId: string]: Question\n}\n\nexport interface IQuestionsState {\n  data: QuestionMap;\n  current: Question | null;\n  queue: string[];\n  loading: boolean;\n  error: string | null;\n  powerups: {\n    [K in PowerupName]: PowerupInfo;\n  }\n}\n\nexport type PowerupName = 'removeTwo' | 'addTime';\n\ntype PowerupInfo = {\n  active: boolean;\n  used: boolean;\n};\n\nexport const initialQuestionsState: IQuestionsState = {\n  data: {},\n  current: null,\n  queue: [],\n  loading: false,\n  error: null,\n  powerups: {\n    removeTwo: {\n      active: false,\n      used: false,\n    },\n    addTime: {\n      active: false,\n      used: false,\n    },\n  }\n}\n\nconst TYPE_PREFIX = 'questions/';\n\nconst requestQuestions = createAsyncAction(\n  TYPE_PREFIX + 'RETRIEVE_REQUEST',\n  TYPE_PREFIX + 'RETRIEVE_SUCCESS',\n  TYPE_PREFIX + 'RETRIEVE_FAILURE',\n)<void, Question[], void>();\n\nconst nextQuestion = createAction(TYPE_PREFIX + 'NEXT')();\n\nconst activatePowerup = createAction(TYPE_PREFIX + 'ACTIVATE_POWERUP')<PowerupName>();\n\nexport const questionsActions = {\n  requestQuestions,\n  nextQuestion,\n  activatePowerup,\n}\n\nexport type QuestionsAction = ActionType<typeof questionsActions>;\n\nexport const questionGuard = (action: Action): action is QuestionsAction => {\n  return action.type.includes(TYPE_PREFIX)\n}\n\nexport const questionsReducer = createReducer<IQuestionsState, QuestionsAction>(initialQuestionsState)\n  .handleAction(requestQuestions.request, (state) => ({ ...state, loading: true, error: null }))\n  .handleAction(requestQuestions.success, (state, action) => {\n    // Shuffle the questions as per spec\n    const questions = action.payload;\n\n    const data: QuestionMap = {};\n    const queue = shuffle(questions.map((question) => {\n      data[question.id] = question;\n      return question.id;\n    }));\n\n    const currentId = queue.shift();\n    const current = (currentId && data[currentId])\n      ? data[currentId]\n      : null;\n\n    return {\n      current,\n      data,\n      queue,\n      loading: false,\n      error: null,\n      powerups: { ...initialQuestionsState.powerups }\n    }\n  })\n  .handleAction(requestQuestions.failure, (state) => ({\n    ...state,\n    loading: false,\n    error: 'Failed to retrieve questions, please refresh the page.'\n  }))\n  .handleAction(activatePowerup, (state, action) => ({\n    ...state,\n    powerups: {\n      ...state.powerups,\n      [action.payload]: {\n        active: !state.powerups[action.payload].used,\n        used: true,\n      },\n    },\n  }))\n  .handleAction(nextQuestion, (state, action) => {\n    // Shouldn't be able to skip if still loading\n    if (state.loading) return state;\n\n    const remainingQuestions = state.queue;\n\n    const nextId = remainingQuestions.shift();\n    const nextQuestion = (nextId && state.data[nextId])\n      ? state.data[nextId]\n      : null;\n\n    return {\n      ...state,\n      current: nextQuestion,\n      queue: remainingQuestions,\n      powerups: {\n        removeTwo: {\n          active: false,\n          used: state.powerups.removeTwo.used,\n        },\n        addTime: {\n          active: false,\n          used: state.powerups.addTime.used,\n        },\n      }\n    }\n  });\n","\nimport { createAction, createReducer, ActionType, Action } from 'typesafe-actions';\n\nexport type Result = {\n  questionId: string;\n  answer: number;\n  duration: number;\n}\n\nexport interface IResultsState {\n  answers: Result[];\n}\n\nexport const initialResultsState: IResultsState = {\n  answers: [],\n}\n\nconst TYPE_PREFIX = 'results/'\nconst answerQuestion = createAction(TYPE_PREFIX +'ANSWER')<Result>();\n\nexport const resultsActions = {\n  answerQuestion\n}\n\nexport type ResultsAction = ActionType<typeof resultsActions>;\n\nexport const resultsGuard = (action: Action): action is ResultsAction => {\n  return action.type.includes(TYPE_PREFIX)\n}\n\nexport const resultsReducer = createReducer<IResultsState, ResultsAction>(initialResultsState)\n  .handleAction(answerQuestion, (state, action) => ({\n      answers: [...state.answers, action.payload]\n  }));\n","import * as React from 'react';\nimport {\n  IQuestionsState,\n  QuestionsAction,\n  initialQuestionsState,\n  questionsReducer,\n  questionsActions,\n  questionGuard,\n} from './questions';\n\nimport {\n  IResultsState,\n  ResultsAction,\n  initialResultsState,\n  resultsReducer,\n  resultsActions,\n  resultsGuard,\n} from './results';\n\nexport interface IGlobalState {\n  questions: IQuestionsState;\n  results: IResultsState;\n}\n\nexport const initialState: IGlobalState = {\n  questions: initialQuestionsState,\n  results: initialResultsState,\n}\n\nexport type GlobalAction =\n  QuestionsAction\n  | ResultsAction;\n\nexport const actions = {\n  ...questionsActions,\n  ...resultsActions,\n};\n\nconst GlobalContext = React.createContext<[IGlobalState, React.Dispatch<GlobalAction>]>([\n  initialState,\n  () => null\n]);\n\nexport const globalReducer = (state: IGlobalState, action: GlobalAction): IGlobalState => {\n  const { questions, results } = state;\n\n  return {\n    questions: questionGuard(action) ? questionsReducer(questions, action) : questions,\n    results: resultsGuard(action) ? resultsReducer(results, action) : results,\n  }\n}\n\nexport const Provider: React.FC = ({ children }) => {\n  const state = React.useReducer(globalReducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={state}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}\n\nexport const useGlobalState = () => React.useContext(GlobalContext);\n","\nimport styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: block;\n  max-width: 45rem;\n  margin: 5rem auto 0;\n`;\n","export const colors = {\n  red: '#F37772',\n  white: '#FFF',\n  purple: '#6100DD',\n  darkblue: '#4800A3',\n  lightblue: '#949BF',\n  yellow: '#F8FF8F',\n  green: '#85FFB8',\n  gray: '#B3B3B3',\n}\n\nexport type AvailableColor = keyof typeof colors;\n\nexport const padding = {\n  small: '0.5rem',\n  medium: '1rem',\n  large: '2rem',\n}\n\nexport const fontSizes = {\n  small: '0.5rem',\n  medium: '1rem',\n  large: '1.5rem',\n  xl: '3.5rem',\n}\n\nexport const fontWeights = {\n  light: '200',\n  medium: '400',\n  heavy: '600',\n}","import styled from 'styled-components';\nimport { fontSizes, fontWeights, colors, padding, AvailableColor } from './config';\n\ntype Props = {\n  color?: AvailableColor;\n}\n\nexport const Button = styled.button<Props>`\n  border: 0;\n  outline: none;\n  width: 100%;\n  cursor: pointer;\n  background: ${props => props.color ? colors[props.color] : colors.white};\n  font-size: ${fontSizes.medium};\n  color: ${colors.darkblue};\n  font-weight: ${fontWeights.heavy};\n  padding: ${padding.medium};\n  text-align: left;\n  margin: ${padding.small};\n  box-shadow: -${padding.small} ${padding.small} 0px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s linear;\n\n  &[disabled] {\n    background: ${colors.purple};\n    color: ${colors.white};\n    cursor: default;\n  }\n\n  &.no-hover {\n    cursor: default;\n  }\n\n  &:hover:not([disabled]):not(.no-hover) {\n    margin: calc(${padding.small} * 1.5) calc(${padding.small} * 1.5) calc(${padding.small} / 2) calc(${padding.small} / 2);\n    box-shadow: calc(${padding.small} / -2) calc(${padding.small} / 2) 0 rgba(0, 0, 0, 0.5);\n  }\n`","// Choosing appropriate default HTML tags, however all can be overwritten using\n// styled-component's `as` prop.\n\nimport styled from 'styled-components';\nimport { fontSizes, fontWeights, colors } from './config';\n\nexport const Title = styled.h1`\n  font-size: ${fontSizes.large};\n  color: ${colors.white};\n  font-weight: ${fontWeights.heavy};\n`\n\nexport const Text = styled.p`\n  font-size: ${fontSizes.medium};\n  color: ${colors.white};\n`","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Layout } from '../ui/Layout';\nimport { Button } from '../ui/Button';\nimport { Title } from '../ui/Text';\n\nexport const Intro = () => (\n  <Layout>\n    <Title as='p'>\n      Welcome to Who Wants to be a Millionaire! Try your hand at winning 1,000,000 SEK\n    </Title>\n    <Link to='/quiz'><Button>Start Quiz!</Button></Link>\n  </Layout>\n)","// Placeholder that would be replaced with nicer Loading component in\n// a real world scenario.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { padding } from './config';\nimport { Title } from './Text';\n\nconst Wrapper = styled.div`\n  padding: ${padding.medium}\n`\n\nexport const LoadingIndicator: React.FC = () => (\n  <Wrapper>\n    <Title as='span'>Loading...</Title>\n  </Wrapper>\n)","import React from 'react';\nimport styled from 'styled-components';\n\nimport { colors, padding } from './config';\n\nconst Wrapper = styled.div`\n  display: inline-block;\n  background: ${colors.red};\n  padding: ${padding.medium} ${padding.large};\n\n  p {\n    font-weight: 500;\n    color: ${colors.white};\n  }\n`\n\ntype Props = {\n  text?: string;\n}\n\nexport const Error: React.FC<Props> = ({ text, children }) => (\n  <Wrapper>\n    {(text) && (<p>{text}</p>)}\n    {(!text) && children}\n  </Wrapper>\n)","import styled from 'styled-components';\nimport { padding } from './config';\n\ntype Props = {\n  size: keyof typeof padding\n}\n\nexport const Spacer = styled.hr<Props>`\n  border: 0;\n  outline: none;\n  width: 100%;\n  cursor: default;\n  margin: ${props => props.size} 0;\n`","\nimport styled from 'styled-components';\n\nexport const Center = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","\nimport axios from 'axios';\n\nimport { Question } from '../../state/questions';\nimport { pseudoUUID } from '../../utils/random';\nimport fakeData from './fakeData.json';\n\ntype APIQuestion = {\n  category: string;\n  type: string;\n  difficulty: string;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n}\n\nexport type RawResponse = {\n  response_code: number;\n  results: APIQuestion[]\n}\n\nconst TRIVIA_API_URL = 'https://opentdb.com/api.php?amount=10&category=9&difficulty=medium&type=multiple&encode=url3986';\n\nconst convertAPIResponse = (triviaResponse: RawResponse): Question[] => {\n  return triviaResponse.results.map((rawQuestion) => {\n    const correct = Math.floor(Math.random() * (rawQuestion.incorrect_answers.length + 1));\n    const answers = rawQuestion.incorrect_answers.map((answer) => decodeURIComponent(answer));\n    answers.splice(correct, 0, decodeURIComponent(rawQuestion.correct_answer));\n    return {\n      id: pseudoUUID(),\n      text: decodeURIComponent(rawQuestion.question),\n      answers,\n      correct\n    }\n  });\n}\n\nexport const hardCodedData = convertAPIResponse(fakeData);\n\nexport const getQuestions = async (): Promise<Question[]> => {\n  const response = await axios.get<RawResponse>(TRIVIA_API_URL);\n  return convertAPIResponse(response.data);\n}","\n// Credit: https://gist.github.com/6174/6062387\n\nexport const pseudoUUID = (): string => (\n  Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n);\n","import React from 'react';\n\nimport { Question as TQuestion } from '../../../state/questions';\nimport { Title } from '../../../ui/Text';\nimport { Button } from '../../../ui/Button';\n\ntype Props = {\n  info: TQuestion;\n  disabledAnswers: number[];\n  answerQuestion: (choice: number) => void;\n}\n\nexport const Question: React.FC<Props> = ({ info, disabledAnswers, answerQuestion }) => {\n  const { text, image, answers } = info;\n\n  return (\n    <div>\n      <Title as='p' data-testid='question-text'>{text}</Title>\n      {(image) && (\n        <img alt={text} src={image} />\n      )}\n\n      {answers.map((choice, i) => (\n        <Button\n          key={i}\n          data-testid={'answer-' + i}\n          disabled={disabledAnswers.includes(i)}\n          onClick={() => answerQuestion(i)}\n        >\n          {choice}\n        </Button>\n      ))}\n    </div>\n  )\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { colors, fontSizes } from '../../../ui/config';\n\nconst StyledContainer = styled.div`\n  width: 8rem;\n  height: 8rem;\n  background: ${colors.darkblue};\n  border: 0.8rem solid ${colors.white};\n  border-radius: 1rem 100% 100% 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  span {\n    display: inline-block;\n    font-size: ${fontSizes.xl};\n    color: ${colors.white};\n  }\n`\n\ntype Props = {\n  remainingTime: number;\n  decimals?: number;\n}\n\nexport const Countdown: React.FC<Props> = ({\n  remainingTime,\n  decimals = 0,\n}) => {\n  return (\n    <StyledContainer>\n      <span>{(remainingTime / 1000).toFixed(decimals)}</span>\n    </StyledContainer>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { colors } from '../../../ui/config';\n\ntype StyleProps = {\n  percentage: number;\n  total: number;\n}\n\nconst StyledBar = styled.div<StyleProps>`\n  height: 100%;\n  width: ${props => props.percentage}%;\n  background: ${colors.white};\n  transition: 1s linear width;\n  transition-delay: 0;\n  border-radius: 0.4rem;\n`\n\ntype Props = {\n  remainingTime: number;\n  totalTime: number;\n}\n\nexport const CountdownBar: React.FC<Props> = ({\n  remainingTime,\n  totalTime,\n}) => {\n  const percentage = Math.max(0, Math.min(100, ((remainingTime / totalTime) - (1000 / totalTime)) * 100));\n\n  return (\n    <StyledBar percentage={percentage} total={totalTime} />\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { useGlobalState, actions } from '../../state';\nimport { PowerupName } from '../../state/questions';\nimport { useTimer } from '../../utils/timer';\nimport { shuffle } from '../../utils/array';\nimport { LoadingIndicator } from '../../ui/Loading';\nimport { Error } from '../../ui/Error';\nimport { Layout } from '../../ui/Layout';\nimport { Button } from '../../ui/Button';\nimport { padding } from '../../ui/config';\nimport { Spacer } from '../../ui/Spacer';\nimport { Center } from '../../ui/Center';\nimport { Title } from '../../ui/Text';\n\nimport { getQuestions, hardCodedData } from './api';\nimport { Question } from './components/Question';\nimport { Countdown } from './components/Countdown';\nimport { CountdownBar } from './components/CountdownBar';\n\n// All time in milliseconds\nconst allowedTime = 15 * 1000;\n\nconst QuizLayoutContainer = styled.div`\n  .loading {\n    display: block;\n    width: 100%;\n    height: 0.8rem;\n    margin-left: auto;\n  }\n\n  .sidebar {\n    display: inline-block;\n    vertical-align: top;\n    width: 9rem;\n    padding-right: ${padding.medium};\n    margin-top: -0.8rem;\n  }\n\n  .main {\n    display: inline-block;\n    vertical-align: top;\n    margin-left: ${padding.medium}\n    width: calc(100% - 11rem - ${padding.medium});\n  }\n`\n\nexport const Quiz = () => {\n  const [{ questions }, dispatch] = useGlobalState();\n  const [hiddenIndices, setHiddenIndices] = React.useState<number[]>([]);\n\n  React.useEffect(() => {\n    // Mimic request to backend service\n    dispatch(actions.requestQuestions.request())\n\n    getQuestions().then((questions) => {\n      dispatch(actions.requestQuestions.success(questions))\n    }).catch((err) => {\n      if (err.message === 'Network Error' && err.response === undefined) {\n        // Browser doesn't have access to internet, use hardcoded questions.\n        dispatch(actions.requestQuestions.success(hardCodedData))\n      } else {\n        // Otherwise, handle error honestly\n        dispatch(actions.requestQuestions.failure())\n      }\n    });\n  }, [!!dispatch]) // Re-run effect if availability of dispatch function changes\n\n  const answerQuestion = (choice: number, duration?: number) => {\n    if (questions.current) {\n      duration = duration || allowedTime - remainingTime;\n\n      if (questions.powerups.addTime.active) {\n        duration = allowedTime\n      }\n\n      // Manage interaction with global state\n      dispatch(actions.answerQuestion({\n        questionId: questions.current.id,\n        duration,\n        answer: choice\n      }));\n\n      dispatch(actions.nextQuestion());\n    }\n  };\n\n  const [remainingTime, timeup, setTime] = useTimer(allowedTime, 1000);\n\n  React.useEffect(() => {\n    if (questions.powerups.addTime.active) {\n      setTime(remainingTime + (10 * 1000));\n    }\n  }, [questions.powerups.addTime.active])\n\n  React.useEffect(() => {\n    if (questions.powerups.removeTwo.active && questions.current) {\n      const { answers, correct } = questions.current;\n      const wrongOptions = answers\n        .map((_, i) => i)\n        .filter((index) => index !== correct);\n\n      setHiddenIndices(shuffle(wrongOptions).slice(0, 2));\n    }\n  }, [questions.powerups.removeTwo.active])\n\n  // Create new function rather than using answerQuestion directly\n  // to prescribe behavior of a skip\n  const skipQuestion = () => answerQuestion(-1, allowedTime);\n\n  const activatePowerup = (powerup: PowerupName) => {\n    dispatch(actions.activatePowerup(powerup));\n  }\n\n  React.useEffect(() => {\n    if (questions.current) skipQuestion();\n  }, [timeup])\n\n  React.useEffect(() => {\n    setTime(allowedTime);\n    setHiddenIndices([]);\n  }, [JSON.stringify(questions.current)])\n\n  if (questions.error) {\n    return (\n      <Layout><Center><Error text={questions.error} /></Center></Layout>\n    );\n  } else if (questions.loading) {\n    return (\n      <Layout><Center><LoadingIndicator /></Center></Layout>\n    );\n  }\n\n  return (questions.current) ? (\n    <Layout>\n      <QuizLayoutContainer>\n        <div className='loading'>\n          <CountdownBar\n            remainingTime={remainingTime}\n            totalTime={allowedTime}\n          />\n        </div>\n\n        <div className='sidebar'>\n          <Countdown\n            remainingTime={remainingTime}\n          />\n\n          <Spacer size='medium' />\n\n          <Button\n            data-testid=\"add-time-button\"\n            color='green'\n            disabled={questions.powerups.addTime.used}\n            onClick={() => activatePowerup('addTime')}\n          >\n            +10 Seconds!\n          </Button>\n\n          <Button\n            data-testid=\"remove-two-button\"\n            color='green'\n            disabled={questions.powerups.removeTwo.used}\n            onClick={() => activatePowerup('removeTwo')}\n          >\n            50/50!\n          </Button>\n\n          <Button\n            data-testid=\"skip-button\"\n            color='yellow'\n            onClick={() => skipQuestion()}\n          >\n            Skip!\n          </Button>\n        </div>\n\n        <div className='main'>\n          <Question\n            key={questions.current.id}\n            info={questions.current}\n            disabledAnswers={hiddenIndices}\n            answerQuestion={answerQuestion}\n          />\n        </div>\n      </QuizLayoutContainer>\n    </Layout>\n  ) : (\n    <Layout>\n      <Title as='p'>Quiz done! <br />Now you can see how you did here:</Title>\n      <Link to='/results'><Button>See Results</Button></Link>\n    </Layout>\n  )\n};\n","\nimport React from 'react';\n\n/*\n * Return\n * 1. Remaining time\n * 2. Whether the time has been hit\n * 3. A function for setting time (can also be used for adding)\n **/\ntype HookData = [number, boolean, (newTime: number, additive?: boolean) => void];\n\nexport const useTimer = (total: number, interval: number = 1000): HookData => {\n  const [remainingTime, setRemainingTime] = React.useState(total);\n  const [timeup, setTimeup] = React.useState(false);\n\n  React.useEffect(() => {\n    let timeDiffStart = 0;\n\n    if (remainingTime > 0 && !timeup) {\n      timeDiffStart = new Date().getTime();\n      const countdownTimeout = setTimeout(() => {\n        const timeDiff = new Date().getTime() - timeDiffStart\n        const newRemainingTime = Math.max(0, remainingTime - timeDiff);\n        if (newRemainingTime <= 10) {\n          setTimeup(true);\n        }\n\n        setRemainingTime(newRemainingTime);\n      }, interval)\n\n      // If a component unmounts before a timeout has been executed, clear it.\n      return () => clearTimeout(countdownTimeout);\n    }\n  }, [remainingTime, interval, timeup]);\n\n  const setTime = (newTime: number) => {\n    setRemainingTime(newTime);\n    setTimeup(false);\n  }\n\n  return [remainingTime, timeup, setTime];\n}\n","import React from 'react';\n\nimport { Result as TResult } from '../../../state/results';\nimport { Question } from '../../../state/questions';\nimport { Title, Text } from '../../../ui/Text';\nimport { Button } from '../../../ui/Button';\nimport { AvailableColor } from '../../../ui/config';\n\ntype Props = {\n  question: Question;\n  result: TResult;\n}\n\nconst getInfo = (answer: number, correct: number, time: number): string => {\n  const seconds = (time / 1000).toFixed(0);\n\n  switch (answer) {\n    case correct:\n      return `You got the correct answer within ${seconds} seconds!`;\n    case -1:\n      return 'You didn\\'t answer this question! 15 seconds were added to your total time.';\n    default:\n      return `Incorrect! Option ${correct + 1} was right but you chose ${answer + 1} after ${seconds} seconds`\n  }\n}\n\nconst getAnswerColor = (answerIndex: number, question: Question, result: TResult): AvailableColor => {\n  // Correct answer should always be green\n  if (answerIndex === question.correct) return 'green';\n  // If provided answer is not the correct answer, it's incorrect\n  if (answerIndex === result.answer) return 'red';\n  // Finally, if an answer was provided, all options should be filled in\n  return 'white';\n}\n\nexport const Result: React.FC<Props>  = ({ question, result }) => {\n  const { text, image, answers } = question;\n\n  return (\n    <div>\n      <Title as='p'>{text}</Title>\n      {(image) && (\n        <img alt={text} src={image} />\n      )}\n\n      <Text>{getInfo(result.answer, question.correct, result.duration)}</Text>\n\n      {answers.map((choice, i) => (\n        <Button\n          key={i}\n          className='no-hover'\n          // If a contestant skipped, all but the correct answer should look disabled\n          disabled={result.answer === -1 && i !== question.correct}\n          color={getAnswerColor(i, question, result)}\n        >\n          {choice}\n        </Button>\n      ))}\n    </div>\n  );\n}","\nimport styled from 'styled-components';\n\nimport { colors, fontWeights, fontSizes, padding } from './config';\n\nexport const List = styled.ol`\n  list-style: none;\n  counter-reset: custom-counter;\n\n  li {\n    counter-increment: custom-counter;\n    position: relative;\n  }\n\n  li::before {\n    content: counter(custom-counter) '.';\n    font-size: ${fontSizes.large};\n    color: ${colors.white};\n    font-weight: ${fontWeights.heavy};\n    position: absolute;\n    left: calc(-${padding.large} - 0.5rem);\n  }\n`\n","\nimport React from 'react';\nimport styled from 'styled-components'\n\nimport { fontSizes, colors } from '../../../ui/config';\n\ntype Props = {\n  top: number;\n  bottom: number;\n  sub: string;\n}\n\nconst StyledContainer = styled.div`\n  display: inline-block;\n  color: ${colors.white};\n  text-align: center;\n  width: 33%;\n\n  span.data, span.sub {\n    display: block;\n  }\n\n  span.data {\n    font-size: ${fontSizes.xl};\n  }\n\n  span.sub {\n    font-size: ${fontSizes.large};\n  }\n`\n\nexport const KeyNumber: React.FC<Props> = ({ top, bottom, sub }) => (\n  <StyledContainer>\n    <span className='data'>{top} / {bottom}</span>\n    <span className='sub'>{sub}</span>\n  </StyledContainer>\n)","import React from 'react';\nimport { useHistory } from 'react-router';\n\nimport { useGlobalState } from '../../state/index';\nimport { Result } from './components/Result';\nimport { Layout } from '../../ui/Layout';\nimport { List } from '../../ui/List';\nimport { KeyNumber } from './components/KeyNumber';\nimport { Spacer } from '../../ui/Spacer';\n\nexport const Results: React.FC = () => {\n  const [{ questions, results }] = useGlobalState();\n  const history = useHistory();\n\n  // Send back to quiz page if no data is available\n  if (Object.keys(questions.data).length === 0 || results.answers.length === 0) {\n    history.push('/quiz');\n  }\n\n  let total = results.answers.length;\n  let correct = 0;\n  let incorrect = 0;\n  let unanswered = 0;\n\n  const resultsByQuestion = results.answers.map((result) => {\n    const question = questions.data[result.questionId];\n\n    if (result.answer === question.correct) {\n      correct++\n    } else if (result.answer === -1) {\n      unanswered++\n    } else {\n      incorrect++\n    }\n\n    return question && (\n      <li>\n        <Result\n          key={result.questionId}\n          question={question}\n          result={result}\n        />\n      </li>\n    );\n  });\n\n  return (\n    <Layout>\n      <KeyNumber top={correct} bottom={total} sub='Correct'></KeyNumber>\n      <KeyNumber top={incorrect} bottom={total} sub='Incorrect'></KeyNumber>\n      <KeyNumber top={unanswered} bottom={total} sub='Unanswered'></KeyNumber>\n\n      <Spacer size='large' />\n\n      <List>\n        {resultsByQuestion}\n      </List>\n    </Layout>\n  );\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { Provider } from './state';\nimport { Intro, Quiz, Results } from './pages';\nimport { colors } from './ui/config';\n\nexport const AppStyle = createGlobalStyle`\n  html, body {\n    background: ${colors.purple};\n  }\n`\n\nexport const Routes = () => (\n  <Switch>\n    <Route path='/' exact={true} component={Intro} />\n    <Route path='/quiz' exact={true} component={Quiz} />\n    <Route path='/results' exact={true} component={Results} />\n    <Redirect to='/' />\n  </Switch>\n);\n\nconst App: React.FC = () => {\n  return (\n    <Provider>\n      <AppStyle />\n      <Router>\n        <Routes />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}